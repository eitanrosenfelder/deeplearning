# -*- coding: utf-8 -*-
"""DL multiclass iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfXInvPZLnjIkTD6VpYN_CYW7qgVJdNV
"""

from sklearn import datasets
from keras.models import Sequential
from keras.layers import Dense
from scikeras.wrappers import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings("ignore")

#calling data
X,Y = datasets.load_iris(return_X_y=True,as_frame=True)

# encoding and converting integers to dummy variables (i.e. one hot encoded)
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
dummy_y = np_utils.to_categorical(encoded_Y)

# baseline model
def baseline_model():
    model = Sequential()
    model.add(Dense(8, input_dim=4, activation='sigmoid'))
    model.add(Dense(3, activation='softmax'))
    # Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

#estimating classes
estimator = KerasClassifier(build_fn=baseline_model, epochs=200, batch_size=5, verbose=0)

#doing k-fold
kfold = KFold(n_splits=5, shuffle=True)

#checking results
results = cross_val_score(estimator, X, dummy_y, cv=kfold)
print("Accuracy: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))